{"title": "Five reasons starting with a light weight, low power (QRP) HF radio might be right for you.", "author": "kyle", "tags": ["radio", "hf", "qrp", "dx", "electronics", "sdr", "winter"], "date": "2019-02-03T01:31:34.536397+00:00", "text": "<p>Hey, long time no see! I have been really enjoying a hobby lately and had to share.</p><p>About 9-10 years ago I received my general class ham radio license. During that period of time in college I primarily used VHF HTs and a mobile radio (all Yaesu) and some internet/SDR experimentation. Well, flash forward a decade and I haven't kept up the skill.</p><p>Spurred by the need for safe and effective outdoors communications at the 0-600 miles range I decided to renew my understanding of electromagnetism and radio communications. I picked up a Yaesu VX-6R for fun while using the Ham Study app on my phone to cram.</p><p>I studied whenever I could, using the study application. It was very effective as the answers to the ham radio exams are known beforehand. I was very nervous the day of the exam though. Of course, it turned out to be no big deal and just a few friendly folks from around the city. And I passed my amateur extra exam, exceeding my own best hopes on performance.</p><p>That was an extremely rewarding challenge and I was relieved to not have to study again more than anything. Frankly I think most willing people can prepare for exams of this nature. Over the past few months since that time I've picked up an Elecraft KX2 and have been operating on HF for a few days here and there when I can get a wire up. It's a rock-star radio and I can't recommend it more.</p><p>Lately propagation has been good. I just broke the 4k mile mark on 20m SSB to Finland. <b>On 12W and an 85' wire out my apartment window.</b> Knowing the science was key -- in this case I was able to leverage grayline propagation by timing and luck. Frankly we should feel lucky as human beings that the Earth's ionosphere offers such incredible possibilities. That 4k mile, 12W contact is 3mW / mile. One day I'll build a 1W CW rig. I'm working hard on Morse code at about ~15 wpm whenever I have the free time.</p><p>To wrap it up, here are the top five reasons you should start with the beautifully frustrating world of low power HF radio.</p><ol><li>It's harder and you enjoy a challenge. Pay careful mind to antenna physics and propagation.</li><li>You like the homebrew electronics scene and are into seriously low power QRPp (Tx power &lt;= 1W) builds.</li><li>You think to yourself often \"sure, Morse code would be a useful skill to have.\"</li><li>Well clear of the RF risk imposed by higher power transmissions, QRP can be operated stealthily in suburban environments.</li><li>The outdoors is where you love to be right? Ultralight QRP plus the low noise-floor of remote backcountry operation provides the optimum QRP DX experience.</li></ol><p>73s, Kyle</p></div>"}
{"title": "It's Hammer Time! (OK Maybe Drill Time...)", "author": "kyle", "tags": ["workbench", "diy", "vlog"], "date": "2017-01-29T03:10:00.947463+00:00", "text": "<h3>I didn't even chop my arm off</h3><p>How many times have I been hammering on some hobby project only to look across the desk at a computer -- dancing to the percussive beat? How many times have I scrambled to wipe up Rem Oil from our polyurethaned kitchen table? Too many times to count.</p><p>I had a real dilemma on my hands. Despite owning a motorcycle, a torque wrench bigger than my arm, and more solvents than you can shake a can of brake cleaner at, I don't have a garage. More projects than I care to recall have ended with me searching for finishing nails in the living room carpet. I'll just admit it: I live in an <i>apartment</i> on the <i>third floor.</i></p><p>This severely limits my options. And let's not get started on space...I've got a large closet full of climbing rope, fishing poles, and backpacking gear threatening to avalanche and silence me at any time. Don't forget to add in thousands of electronics components along with elbow room for a roasting-hot soldering iron.</p><img alt=\"oh my god this is my actual closet\" src=\"/static/images/avalanche.gif\"/><p>This madness has to stop! I need...a work area! A workbench! Many years ago I built my own desk out of 3/4\" plywood and some old filing cabinets. It's soldiered on for over half a decade and has been one of my most rewarding DIY projects. I was really feeling the itch to do more woodworking...but could I manage it in a suburban apartment?</p><p>I spent a day designing (and drinking). I could no longer distinguish between the aroma of budget bourbon and budget lumber. It was possible. And I could do it cheap -- the goal was too keep the entire build under $100, including some necessities such as a new circular saw blade, appropriately sized wood screws, and lumber. Other tools which I already owned, such as a speed square and Dewalt drill, would come in handy. I sharpened my woodworking pencil in my wife's eyeliner pencil sharpener and got to work.</p><iframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"https://www.youtube.com/embed/G0ySdI3lJyk\" width=\"560\"></iframe><p>Of course, I had to video the event. And it went pretty well! In about seven hours on a Saturday I had the raw bench built. I thought it could use some finishing, so on the next Saturday I went ahead and sanded and oiled the bench. A bit of pegboard and a nice surge protector finished it off for the time being.</p><h3>Wax on, wax off...</h3><p>I chose Danish oil for the finish. It has some nice properties: dead-easy application and touchups, as well as leaving the ~rough surface for working on projects. I'd feel bad tearing up a coat of poly all the time. It also has the interesting property of self-combusting in your soaked rags, so be careful about that.</p><img alt=\"evil fire girl\" src=\"/static/images/burning_workbench.jpg\"/><p>I won't go deep into the design (just check out the video) but I'll mention that the desk is 4' long x 26\" deep x 38\" tall. The 4' dimension was a no-brainer -- it's the standard plywood width in the USA. But I seriously hemmed an hawed about the other two. I chose 26\" deep so that it'd be narrow enough to fit through interior doors without deconstruction. Weighing in at about 130 lbs this meant that two or three strong people could carry it down the stairs when I move.</p><p> The height was trickier -- a lot of workbench guidelines would have seen me in the 32\"-36\" range. However, I wanted this desk to be used primarly when standing. I also am more likely to be soldering a radio together on the bench than man-handling large furniture. After obsessing around the house with a tape measure I decided on 38\" and I'm glad I did. It's perfect for standing. In fact I've been using it as a standing desk for work with a lot of success. The bonus is that I can also fit a stool underneath the bench for when I do want to change things up and sit.</p><p>Overall I've been very happy with the results of my effort. I'm looking forward to using it for projects in the future, free of the guilt of shaken computers and dissolved kitchen tables. I'd recommend to everyone out there who has a DIY spirit and lives in an apartment to not be afraid to tackle this sort of project. With a little respect to your neighbors, don't be afraid to rip through a few 2x4s. Just make sure to clean up your mess!</p></div>"}
{"title": "A Man and His Jupyter Notebook", "author": "kyle", "tags": ["pydata", "devops", "talk"], "date": "2016-10-28T16:03:31.511405+00:00", "text": "<p>I recently spoke at PyData Carolinas 2016 -- right here in the Research Triangle Park. What a blast! I was blown away by the quality of talks and speakers. The organizers did an excellent job and I can't thank them enough.</p><p>I was also given the chance to talk, as a keynote speaker no less. When the opportunity was presented to me I was quite nervous. This was my largest speaking engagement to date.</p><p>This conference is all about data. As I thought about my experiences as both a physicist and software engineer I realized I had an exciting viewpoint -- the intersection of data and devops!</p><p>Data is the common fabric linking all our problem spaces; from nuclear physics, to structural engineering, to marketing and yes, devops! In my talk I cover my own engineering journey and how I try to leverage data and devops to take my team further.</p><p>I hope you enjoy!</p><iframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"https://www.youtube.com/embed/vVu0Rfw5UOo\" width=\"560\"></iframe></div>"}
{"title": "Cover Your SaaS", "author": "kyle", "tags": ["pydata", "talks", "vlog", "ops", "management"], "date": "2016-09-20T13:05:11.228566+00:00", "text": "<h3>Missing Puzzle Pieces</h3><p>I know what you're thinking: \"alright Kyle, where's the ops?\" You've seen lots of my spare-time development but I need to complete the kdevops.com picture. In this blog post we dive into my operations philosophy and advice for operators new and old.</p><p>Operations is a critical part of a software team and has completely transformed my own engineering process. Below is a vlog in which I cover:</p><ul><li>What is ops and what are the responsibilities of operators?</li><li>Tips and advice for a happy ops team:    <ul><li>learning from senior folks</li><li>being prepared for your shift</li><li>effective handoffs between shifts</li><li>the delicate dance of delegation</li><li>the roundhouse kick of incident escalation</li></ul></li><li>How does one manage a serious incident?</li></ul><p>Click below to check out the vlog! On YouTube I've included links to jump straight to the tips as well as the serious incident management advice.</p><iframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"https://www.youtube.com/embed/2p2yDN4KVrg\" width=\"560\"></iframe><h3>$&gt; man truncate</h3><p>This one came in pretty heavy -- about twenty minutes -- and that's leaving a lot on the cutting room floor. I spent about three hours preparing and rehearsing, about an hour and a half in front of the camera, and three hours editing. I wanted to cut it down even more but I believe the information in this vlog is pretty darn good. Plus I ran out of wine for more editing.</p><h3>Videography Notes</h3><p>The setup was the same as my last vlog. The lighting however drove me nuts -- I'll watch out for sunlight overexposure in the future. Since the content was so vast I had to do multiple takes and cut out any speaking stumbles. Getting better though! I realize now that my OpenShot is way behind the latest. OpenShot 2.1 <a href=\"http://www.openshotvideo.com/2016/08/openshot-21-released.html\">looks really good</a> and I'm going to give it a try next time around.</p><h3>$&gt; sudo reboot</h3><p>I've got some pretty awesome content coming your way. I do get out of the house you know. In fact, I just gave a keynote about data science and devops at <a href=\"http://pydata.org/carolinas2016/\">PyData Carolinas 2016</a>. Talk about nervous! But it came out pretty well thanks to some hard work and good feedback from the IBM Cloudant team (thanks all). Lots of folks came up to talk afterwards and the data science crowd seemed very excited about devops!</p><blockquote class=\"twitter-tweet\" data-lang=\"en\"><p dir=\"ltr\" lang=\"en\">Kyle Snavely at <a href=\"https://twitter.com/hashtag/pydatacarolinas?src=hash\">#pydatacarolinas</a>: <a href=\"https://twitter.com/IBMcloudant\">@IBMcloudant</a> Forecast relies on NumFOCUS tools: pandas numpy matplotlib jupyter! <a href=\"https://t.co/8MkqhVCHpL\"><img 776410829579284480\"=\"\" alt=\"Kyle at PyData Carolinas /&gt;&lt;/a&gt;&lt;/p&gt;\u2014 NumFOCUS (@NumFOCUS) &lt;a href=\" https:=\"\" numfocus=\"\" src=\"/static/images/kyle_pydata_01.jpg\" status=\"\" twitter.com=\"\"/>September 15, 2016</a></p></blockquote><script async=\"\" charset=\"utf-8\" src=\"//platform.twitter.com/widgets.js\"></script><p>Once the conference organizers transfer the talk videos to YouTube I'll write up a blog post here so you can see me in my full newbie-speaker glory. Thanks again from kdevops.com and I'll see you next time!</p></div>"}
{"title": "Friends don't let friends do crystal math", "author": "kyle", "tags": ["rduino", "radio", "electronics", "vlog"], "date": "2016-09-03T15:56:41.828584+00:00", "text": "<h3>Nerds in HD</h3><p>I've been a ham radio operator on and off since 2009. One thing I've always wanted to do was build my own radio for morse code (CW) communication on the HF bands. I've put in some extra hours recently to bring you all just that. This is the start of a radio building project that will probably take me some time. Plus, I've tried something new, the first video blog for kdevops.com! Check out the YouTube video below to see my arduino controlled 20m HF transmitter build.</p><iframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"https://www.youtube.com/embed/WX5vgUznuk4\" width=\"560\"></iframe><h3>Circuit Training</h3><p>Here are a few more details on the circuit. The heart of the transmitter is a crystal oscillator. When powered, the oscillator generates a varying voltage on its output pin. Electrical oscillation is what generates the radiation that we transmit, and the same physics (in reverse) applies for receiving radio signals. By using a system designed for resonance on a particular frequency we can effectively receive or transmit via radio -- a tuned antenna for example. In this circuit I use a small self-contained oscillator that makes the whole project easy. You can also use a simple crystal resonator although you'll need additional components to build a sustaining electrical oscillation -- a positive feedback loop using amplifiers such as transistors or op-amps.</p><img alt=\"various crystals\" src=\"/static/images/crystals.jpg\"><p class=\"img-caption\">Resonators on the left, oscillator on the right.</p><p>On the top right of the breadboard you can see a simple voltage regulator circuit. I don't want to use the arduino to power the circuit as I'll probably step up the power demands over time. I've built the circuit based on 5V, so I've chosen a 7805-style regulator. This allows for a stable 5V power supply from various sources, such as batteries that will vary in behavior through the life of their charge. It'll hold the 5V through varying current consumption by the components downstream. The particular construction here isn't anything special -- I've picked a design straight out of the datasheet. The capacitors provide a ground short for AC disturbances and I've added an LED to remind me when the power is on.</p><img alt=\"radio transmitter breadboard\" src=\"/static/images/radio_tx.jpg\"/><p>On the lower left, feeding into the output-enable pin (OE, pin 1) of the oscillator is a P2N2222A transistor switch. I highly recommend an oscillator with an OE pin. You can leave power on the oscillator and it'll only output its signal when the OE pin voltage is brought high. As I don't want to place any demands on the arduino I added the transistor to bring the OE pin high from the supply voltage. I choose the transistor base resistor based on the specs of the P2N2222A and the desire to constrain the arduino's current output to the micro-amp range. The green LED glows dimly when not transmitting and brightly once the OE pin is brought high.</p><p>This is a late-night hobby level design, so it may not be perfect. I was happy as this design worked on the first try...something not so common in my own tinkering! There is a ton of information on circuit components and oscillators like these online and I encourage you to investigate design possibilities for yourself. I'm looking forward to building more functionality for this radio, and the challenges of designing an antenna to work within the constraints of apartment life.</p><p>Code for the arduino is up on the <a href=\"https://github.com/ksnavely/chainsaw/tree/master/radio/cw_encoder\">chainsaw repo</a>.</p><h3>Videography Notes</h3><p>I've actually made a lot of video blogs in the past, mostly for motorcycling. I use a GoPro Hero 3+ and an Olympus external stereo mic and have been really impressed by the quality of both. For various reasons, mostly because I didn't have too much to talk about, I've never put them up online.</p><img alt=\"a good riding day\" src=\"/static/images/motosneak.png\"/><p class=\"img-caption\">Maybe some day I'll let you all in on this fun.</p><p>I felt I had to give a shout out to the FOSS I've been using to edit images and now video. For images, you can't go wrong with the GIMP. It's definitely a little tricky sometimes, but what advanced image editor isn't? What really surprised me was the video editing software OpenShot. If you are on a linux box and need basic video editing I think you can't go wrong here. It was fairly intuitive to use and I was able to cut my vlog take and make up the intro. The only thing I'm not happy about is it looks like the final frame of my video might have had a fade-out glitch? But that could have been me as well. As I continue to make videos here and there I'll work to make everything excellent.</p><p>Thanks again and I'll see you next time for more kdevops fun!</p></img></div>"}
{"title": "Mulligan!", "author": "kyle", "tags": ["iterate", "CMS", "design"], "date": "2016-08-30T02:56:52.817857+00:00", "text": "<p>I've been pretty happy with the blog software I've rolled together for kdevops.com. But one thing that's been driving me a bit nuts is that I had no way to easily edit the posts I make. Inevitably I make an error or two, not helped by the fact I often have to write these late at night. I mentioned in a previous post, \"CMS: what is dead may never die\", that the ability to edit a post was something I desired. Well, it didn't take too much to add the feature in, and I've added the ability to preview a post as well.</p><img alt=\"swing and a miss\" src=\"/static/images/golf_fail.gif\"/><p>Prior to these features, I've been running things a bit fast and loose. I like to rough out each post locally in vim, since I might take a day or two to tweak things. Next I'd open up kdevops.com or my staging server and edit the HTML in the browser, pasting in my new post to make sure the HTML came out correctly. Then I'd get a nod from a trusted source (aka my wife) and go ahead and create the blog entry.</p><p>Typically it's about five minutes later and I'm ssh'd into my production box, attempting to edit the post using ipython and pymongo. Not the way I like to roll. No longer! Check out the screencap below, you can see the interface I use to write up posts with the preview functionality.</p><img alt=\"can you spot the mistakes?\" src=\"/static/images/edit_screencap.png\"/><p>I've pushed a few other beautifications lately, some new design elements for the main page and a glamor shot of yours truly in the sidebar. I hope it makes the site shine! These small improvements are a bit like keeping up regular car maintenance. They might not be Hollywood, but they'll keep things running smoothly.</p><p>Thanks for reading, and look forward to some exciting posts in the future!</p></div>"}
{"title": "Socket programming makes me serly", "author": "kyle", "tags": ["erly", "erlang", "cherl"], "date": "2016-05-27T13:39:25.718705+00:00", "text": "<h3>Let the client swarm begin!</h3><p>Recently I was revisiting one of my hobby projects, <a href=\"https://github.com/ksnavely/cherl\">cherl</a>, an Erlang chat server/client. I'm pretty happy with it, as it was my first non-trivial Erlang application. I'd love to actually deploy it alongside my other web services, but it has one big drawback.</p><img alt=\"a burning computer\" src=\"static/images/burning_computer.gif\"/><h3>The Erlang distribution protocol isn't secure</h3><p>Yes, there are steps one can take to make it more secure. But you still are locked in to designing a client that's written in Erlang or has an Erlang layer to communicate with the server. It'd be a lot better if cherl could use TCP, and especially TLS. I went searching and found a few helpful tutorials:</p><ul><li><a href=\"http://learnyousomeerlang.com/buckets-of-sockets\">LYSE</a></li><li><a href=\"http://20bits.com/article/erlang-a-generalized-tcp-server\">20bits</a></li><li><a href=\"http://erlang.org/doc/apps/ssl/using_ssl.html\">Erlang docs</a></li></ul><p>I started out writing a module to add to cherl when it occurred to me that it could be useful to provide an application to do this job in a ~generic fashion. I could then reuse that layer for multiple projects. I expect that sophisticated Erlang projects roll their own TLS/TCP layer with a fairly custom setup. However, for a large class of small applications that just need a little help with TLS/TCP something simple should be enough.</p><h3>Enter the serly</h3><p>After a few nights of coding I've minted an initial application, <a href=\"https://github.com/ksnavely/serly\">serly</a>. Consumers of serly just need to provide a callback function which expects an active TCP socket. The callback function implements the business logic for the consumer/server. In this way, serly is pretty generic. If more configurability is needed for serly it's straightforward to extend the code and add to the config. Another key feature of the application is that it will listen for new connections asynchronously. After accepting a connection, serly spawns another worker to listen for a new connection before proceeding to the business logic of the callback function.</p><p>In the GitHub repository the README.md details some usage examples, these are provided in serly's 'usage_example' module. Let's give the examples a whirl, first with one client, and then a thousand.</p><pre>$&gt; erl -pa $(rebar3 path) -config serly.config1&gt; usage_example:start().Received: Why, hello there!Received: Why, hello there!Received: Why, hello there!Received: Why, hello there!Received: Why, hello there!Received: Y'all come back now!ok2&gt; usage_example:multi_start(1000).okReceived: Why, hello there!Received: Why, hello there!Received: Why, hello there!Received: Why, hello there!Received: Why, hello there!Received: Why, hello there!Received: Y'all come back now!Received: Why, hello there!Received: Y'all come back now!...thousands of io:formatsReceived: Why, hello there!Received: Why, hello there!Received: Why, hello there!Received: Why, hello there!Received: Why, hello there!Received: Y'all come back now!</pre><img alt=\"controlled mining explosion\" src=\"static/images/mining.gif\"/><p>Awesome! If you want to play with more than ~1024 clients you may need to increase your open files limit. I really look forward to integrating this into cherl, and integrating cherl into my budding cloud ecosystem. Thanks for reading, and go check out the code!</p></div>"}
{"title": "Let it crash!", "author": "kyle", "tags": ["erlang", "redis", "teckel"], "date": "2016-05-23T02:21:15.258240+00:00", "text": "<h3>pwn'd</h3><p>I regularly get schooled in a variety of games. But just how badly? In order to figure that out I'd need to track folks' scores for whatever game was in question. I need a leaderboard. A few months back I kicked off just such an application, <a href=\"https://github.com/ksnavely/teckel\">teckel</a>, written in Erlang and using Redis as a data store. Today I've got it shipped to staging and ready for some real polish. This blog post is going to dive into the stack a little bit give a preview of what I hope becomes a fun service I can plug into any games I make.</p><img alt=\"animated chess game\" src=\"static/images/chess.gif\"/><h3>Where's the OTP beef?</h3><p><a href=\"https://www.erlang.org/\">Erlang</a>. It's awesome, handles concurrency/distributed system problem domains well, and you get to code in a functional style with neat syntax. OK, I'll admit...my first time reading Erlang left me confused. IBM Cloudant offers a distributed database as a service, based on <a href=\"http://couchdb.apache.org/\">Apache CouchDB</a>, both are composed of many Erlang applications which work together to offer that sweet NoSQL flavor.</p><p>Over time the language became less mysterious. I was exposed to Erlang during my operations shifts at Cloudant, writing tooling to support our system, and eventually hobby projects. I was lucky enough to attend an <a href=\"https://www.erlang-solutions.com/\">Erlang Solutions</a> training week led by <a href=\"http://rvirding.blogspot.com/\">Robert Virding</a>, one of the language's creators. I have been very impressed with the language and I chose it for building my leaderboard application.<h3>Redis: you can't even name your databases</h3><img alt=\"Redis logo\" src=\"static/images/redis.png\"/><p>It's true! I found it a bit odd initially, but most of <a href=\"http://redis.io/\">Redis's</a> design choices we made for performance. I picked it as the data layer for the leaderboard because it's a cool technology. At IBM Cloudant, we use it to power our asynchronous task queue, but we get a lot for free thanks to a neat library called <a href=\"http://python-rq.org/\">Redis Queue</a>. I wanted to dive a little deeper and have redis deployed to my own personal cloud.</p><p>I'll be honest, Redis made implementing a leaderboard pretty easy. Redis offers a particularly useful value type called the sorted set. One can apply a score to items in the set and then easily access items based on the score. The ZADD query lets us add an item with a score, ZSCORE will tell us an item's score, and ZREVRANGE plus WITHSCORES grabs the top N scores/set items. I implemented a simple database <a href=\"https://github.com/ksnavely/teckel/blob/master/src/database_server.erl\">gen_server</a> which does just that, serving as a database abstraction layer for teckel.</p><h3>Hello, Erlang, are you there?</h3><img alt=\"this is actually how you deploy an Erlang application, cord-phone not included\" src=\"static/images/erl_phone.gif\"/><p>So Redis is doing a lot of the hard work for the leaderboard. What else do we need to round out the application? Well, the Redis connector <a href=\"https://github.com/wooga/eredis\">eredis</a> is a fantastic choice for adding Redis to your Erlang application. I found it very easy to use. In addition we gain a JSON HTTP layer thanks to <a href=\"https://github.com/ninenines/cowboy\">cowboy</a>, a small and fast HTTP server written in Erlang, with pretty good docs.</p><p>I mentioned this is out in staging, but what does it look like? Here's an example interaction:</p><pre>$&gt; curl -X POST -H 'Content-Type: application/json' -d '{\"score\": 1337}' localhost:8080/user/kyle/score{\"ok\": true}$&gt; curl -X POST -H 'Content-Type: application/json' -d '{\"score\": 999999999}' localhost:8080/user/emily/score{\"ok\": true}$&gt; curl localhost:8080/user/kyle/score{\"score\": 1337}$&gt; curl localhost:8080/user/emily/score{\"score\": 999999999}$&gt; curl localhost:8080/top_scores{\"top_scores\": {\"emily\":\"999999999\",\"kyle\":\"1337\"}}</pre><p>Pretty world shattering stuff, I know. One can GET/POST individual scores and the top_scores endpoint fetches the top ten scores stored in Redis. Besides this blog post, the first use case I envision is as a high-score tracker for <a href=\"https://kdevops.com/rockfall/\">Rockfall</a>. The overall aim is to have the leaderboard as a microservice which serves a variety of my projects. Once it's really firing on all cylinders, I'll write up another blog post. To get this out to staging, I had to tackle another hurdle which thankfully wasn't too bad.</p><img alt=\"Zach Galifianakis -- possible new Gandalf form?\" src=\"static/images/release_you.jpg\"/><p>If you dive past trivial Erlang, you will find a rich world of applications and releases. Tools like <a href=\"https://github.com/erlang/rebar3\">rebar</a> help developers get their software out to production. Actually, an Erlang release isn't just your application -- it's that, the dependencies, <i>and the whole Erlang run time system</i>. Now that's cool. For teckel, I chose an alternative release tool (for fun), <a href=\"https://erlang.mk/\">erlang.mk</a>.</p><p>The way I've <a href=\"https://github.com/ksnavely/ansible-repo\">wired things</a> Erlang and Redis are installed by community Ansible playbooks. Next, we clone the teckel repo and build a release. I do this on the same box that serves teckel but this could be done by a build server. Finally, I've wrapped the teckel release with runit so I can manage it as a service. It's that easy!</p><p>That's it for today's sneak peek. I've got the ansible stack doing some neat things at this point, and I think my next bout of free time will be spent cleaning up the roles and hardening security. Thanks for reading, now go <a href=\"http://learnyousomeerlang.com/\"> learn you some Erlang</a>!</p></p></div>"}
{"title": "CMS: what is dead may never die", "author": "kyle", "tags": ["dobbson", "CMS", "security"], "date": "2016-05-19T13:20:31.154637+00:00", "text": "<h3>Here's an ansible pro-tip:</h3><p>Don't attempt to deploy your software to production with months-stale unstaged changes in your ansible repo. <b>Ahem</b> with only minor testing of the Pingdom setup I've now deployed the first bit of a CMS for this website. Based around <a href=\"http://flask-login.readthedocs.io/en/latest/\">Flask-Login</a>, the ability to authenticate is a key component of a non-trivial service.</p><p>Overall I like Flask-Login. I have to say though, getting it to work (the ability to authenticate working) was not straightforward. I recall spending a few evenings looking through examples online before finding an approach that worked for me. Here's the <a href=\"https://github.com/ksnavely/website/pull/7/files\">diff</a> that worked for me in the end. Bundled with authentication I've added the ability to create blog entries right from the website (for authenticated users). This is a heck of a lot nicer than creating them with ipython and pymongo.</p><h3>Hand in hand with authentication is authorization.</h3><p>For those not in the know, authentication is \"you are who you say you are\" and authorization is \"you are allowed to do this.\" For now, I don't have an authorization layer so y'all can't check out the new-blog page. Since I'm a nice guy, here's a screen shot:</p><img alt=\"screencap of the CMS blog creation page\" src=\"static/images/CMS_new.png\"/><p>This is all really neat. I can see the path forward here for things like commenting on blog posts, editing features for admins (so you don't have to bring up ipython), things of that sort.One thing that's tricky is balancing Flask with JavaScript. In my past nuclear-physicist life, I used Backbone.js to create a rich web application for the <a href=\"http://sanfordlab.org/science/majorana\">Majorana</a> collaboration. At the moment the JavaScript on this site is pretty static -- I'm going to have to do some more research on how to flesh it out in balance with the Python. Especially because I'm definitely a JSON kind of person, not a form-post fan.</p><img alt=\"security holes everywhere\" src=\"static/images/buzz.jpg\"/><h3>Hand in hand with authentication is security.</h3><p>I'm not a security engineer. But I try to follow common sense (he says while violating a few best practices). I'll certainly need to harden this stack over time...naturally a side personal project has limited time. It only took me two months to deploy the CMS new-post page to production! For instance, I had to take down the un-listed account creation API endpoint. Sorry l337 h4x0r5. Thankfully Amazon Security Groups make it pretty easy to limit access to a server, at least at the basic level. Until I get a chance to make a dedicated security pass, I politely ask any $COLOR hat folks to just not run my AWS bill up after pwn'ing me. I've got a family to feed.</p><img alt=\"dobbson the dachshund\" src=\"static/images/dobbs.jpg\"/></div>"}
{"title": "Anything but CSS", "author": "Kyle", "tags": ["first-post"], "date": "2016-03-18T12:46:45.900884+00:00", "text": "<h3>Welcome!</h3> <p>You're looking at the front page of a project I'm evolving in my free time.</p> <p>I recently told a friend \"I've been making websites since the seventh grade, and each time they suck less.\" Well, this one sucks the least! This front page will serve as a blog-like web application where I'll add my thoughts on technology (or motorcycles, or beer). Now, I typically find it a lot easier to stand up a service in the cloud than actually writing blog articles, so forgive me. This first one is just an introduction to the tech stack I've used.</p> <h3>What's in a cloud?</h3> <p>I'm hosting this stack in AWS with some non-trivial components. I've chosen Ansible as my configuration management tool, and you can check out my <a href=\"https://github.com/ksnavely/ansible-repo\">infra code</a> on github. The <a href=\"https://github.com/ksnavely/website\">flask layer</a> is the next key bit and is where I'll try and evolve more interactivity for the front page.</p> <p>There's also some neat stuff going on behind the scenes. I've picked nginx as my proxy layer (you can check out my config in ansible-repo, I actually got TLS certs working, neato!) and mongodb as the document storage engine. Mongo holds the blog posts and I've also got some user creation/authentication features working in the background (no UI for that yet). I'm hoping to soon add a few more layers, specifically rabbitMQ for message brokering and a relational datastore for timeseries data to show off with graphs.</p> <p>Making this site not terrible are AWS, bootstrap, and pingdom. I picked AWS because it's super easy and I hope to have dynamic cloud inventory with Ansible working soon. Pingdom I use for monitoring the site. If you don't have monitoring, your site is probably down. If you do have monitoring, it's probably down but at least you'll know about it! And finally, bootstrap. As much as I like technology I'll never be a designer. Keen eyes will see I've ripped this CSS right out of the bootstrap examples. But hey, it looks nice, right?</p> <p>Thanks for visiting, and I hope to have some cool projects and thoughts highlighted here soon.</p><p class=\"blog-post-meta\">Tags:  first-post </p></div>"}
